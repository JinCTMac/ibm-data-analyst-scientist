Two Dimensional Numpy

We can create numpy arrays with more than 1 dimension.

Array creation in 2d:
  A 2d array, or a matrix, can be represented like so:
    a = [[1,2,3], [4,5,6], [7,8,9]]

  Which looks like this in practice:
    [[1,2,3],
     [4,5,6],
     [7,8,9]]

  If we use the arr.ndim function, we can return the number of dimensions this array contains, which will be 2. It is useful to also think about it in terms of the level of nesting in the lists, where a single level of nested list is a 2d array, while two levels is a 3d array, and so on.

  If we use the .shape function, we get the number of rows and then the number of columns that thte array occupies. For the above array, it is (3,3).

  Finally, if we use the .size function, it will return the number of elements within the array, which for the above array is 9.

Accessing elements in a 2d array:
  We can access elements within a 2d array using the same [] notation, but with two [] to represent the row and the column being accessed.

  Hence for the value in the 1st row in the 2nd column, we need to use [0,1] to access the value on the first row with index 0 and the value on the 2nd column with index 1.

Slicing in 2d arrays:
  We can slice 2d arrays by just considering the rows and columns we want to slice from. arr[0, 0:2] slices from the 1st row, taking the 1st and 2nd values from that row.

Array/matrix addition:
  We can add 2d arrays together, which works the same as matrix addition in that you add the elements from each array in the same position in the corresponding array.

  Imagine arr1 = [[1,0], [2,3]]
  And arr2 = [[2,1], [3,1]]

  arr1 + arr2 = [[3,1], [5,4]]

Scalar multiplication with 2d arrays/matrices:
  To multiply a 2d array or matrix by a scalar, we simply multiply each element in the array by the scalar value.

  arr1 = [[1,2], [3,4]] * 2
  = [[2,4], [6,8]]

Hadamar multiplication with 2d arrays:
  Hadamar multiplication involves multiplying each element in each array with the corresponding element in the same position in the other array.

  arr1 = [[1,0], [2,1]]
  arr2 = [[1,1], [2,3]]

  arr3 = [[1,0], [4,3]]

Matrix multiplication:
  Involves multiplying two different matrices, but where the number of columns in one of the two matrices matches the number of rows in the other matrix.

  We take the dot products of each row with each column in each matrix.

  arr1 = [[0,1,1], [1,0,1]]
  arr2 = [[1,1], [1,1], [-1,1]]

  result = [[0,2], [0,2]]

  In numpy, we can just use np.dot on the two different arrays to get the result of matrix multiplcation on the two arrays.
